// src/routes/order.routes.js
import { Router }         from 'express';
import prisma             from '../utils/prisma.js';
import { authMiddleware } from '../middlewares/auth.js';
import { notifyAgent }    from '../utils/teleg.js';

const router = Router();
router.use(authMiddleware);

/**
 * POST /orders
 * –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞.
 * body: { storeId: number, items: Array<{ productId:number, qty:number }> }
 */
router.post('/', async (req, res, next) => {
  try {
    const { storeId, items } = req.body;
    if (!storeId || !Array.isArray(items) || items.length === 0) {
      return res
        .status(400)
        .json({ error: 'storeId –∏ –Ω–µ–ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ items –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' });
    }

    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –±–∞–∑–æ–≤—ã–µ —Ü–µ–Ω—ã
    const products = await prisma.product.findMany({
      where:   { id: { in: items.map(i => i.productId) } },
      select:  { id: true, basePrice: true }
    });

    // –°—á–∏—Ç–∞–µ–º —Å—É–º–º—É
    const total = items.reduce((sum, { productId, qty }) => {
      const p = products.find(x => x.id === productId);
      return sum + (p?.basePrice || 0) * qty;
    }, 0);

    // –°–æ–∑–¥–∞—ë–º –∑–∞–∫–∞–∑ –≤–º–µ—Å—Ç–µ —Å –ø–æ–∑–∏—Ü–∏—è–º–∏
    const order = await prisma.order.create({
      data: {
        storeId: +storeId,
        userId:  req.user.id,
        total,
        items: {
          create: items.map(({ productId, qty }) => {
            const p = products.find(x => x.id === productId);
            return {
              productId,
              quantity: qty,
              price:     p?.basePrice || 0
            };
          })
        }
      },
      include: {
        user: {
          select: { login: true, fullName: true }
        },
        store: {
          select: {
            title: true,
            user: {
              select: {
                agent: {
                  select: { login: true, fullName: true, phone: true, telegramId: true }
                },
                fullName: true
              }
            }
          }
        },
        items: {
          include: {
            product: {
              select: { name: true, volume: true }
            }
          }
        }
      }
    });

    // –õ–æ–≥–∏—Ä—É–µ–º
    console.log('üÜï New order created:', order);

    // –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–≥–µ–Ω—Ç–∞
    const tg = order.store.user.agent?.telegramId;
    if (tg) {
      notifyAgent(
        tg,
        `üÜï –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ #${order.id}\n` +
        `–ú–∞–≥–∞–∑–∏–Ω: ${order.store.title}\n` +
        `–°—É–º–º–∞: ${total.toFixed(2)} ‚ÇΩ`
      );
    }

    return res.status(201).json(order);
  } catch (err) {
    next(err);
  }
});

/**
 * GET /orders?status=[NEW|DONE]
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–∞–∫–∞–∑—ã, –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ —Ä–æ–ª–∏ –∏ –ø–æ –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–º—É —Å—Ç–∞—Ç—É—Å—É.
 */
router.get('/', async (req, res, next) => {
  try {
    const { status } = req.query; // –µ—Å–ª–∏ undefined ‚Äî —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ —Å—Ç–∞—Ç—É—Å—É –Ω–µ –±—É–¥–µ—Ç
    const { role, id: userId } = req.user;

    // –ë–∞–∑–æ–≤—ã–π —Ñ–∏–ª—å—Ç—Ä –ø–æ —Ä–æ–ª–∏
    const where = {};
    if (role === 'AGENT') {
      where.store = { user: { agentId: userId } };
    } else if (role === 'USER') {
      where.store = { userId };
    } else if (role === 'MANAGER') {
      where.store = { managerId: userId };
    }
    // ADMIN ‚Äî –±–µ–∑ –¥–æ–ø.–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π

    // –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å—Ç–∞—Ç—É—Å, –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω
    if (status && ['NEW','DONE'].includes(status)) {
      where.status = status;
    }

    const orders = await prisma.order.findMany({
      where,
      include: {
        user:  { select: { login: true, fullName: true } },
        store: {
          select: {
            title: true,
            user: {
              select: {
                agent: { select: { login: true, fullName: true } }
              }
            }
          }
        },
        items: {
          include: {
            product: { select: { name: true, volume: true } }
          }
        }
      },
      orderBy: {
        createdAt: 'desc'
      }
    });

    return res.json(orders);
  } catch (err) {
    next(err);
  }
});

/**
 * GET /orders/:id
 * –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –æ–¥–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞
 */
router.get('/:id', async (req, res, next) => {
  try {
    const order = await prisma.order.findUnique({
      where: { id: +req.params.id },
      include: {
        user:  { select: { login: true, fullName: true } },
        store: {
          select: {
            title: true,
            user: {
              select: {
                agent: { select: { login: true, fullName: true } }
              }
            }
          }
        },
        items: {
          include: {
            product: { select: { name: true, volume: true } }
          }
        }
      }
    });
    if (!order) {
      return res.status(404).json({ error: 'Not found' });
    }
    return res.json(order);
  } catch (err) {
    next(err);
  }
});

/**
 * PUT /orders/:id/status
 * –°–º–µ–Ω–∞ —Å—Ç–∞—Ç—É—Å–∞ –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (—Ç–æ–ª—å–∫–æ AGENT –∏ ADMIN)
 * body: { status: 'NEW'|'DONE', comment?: string }
 */
router.put('/:id/status', async (req, res, next) => {
  try {
    const { status, comment = '' } = req.body;
    if (!['NEW','DONE'].includes(status)) {
      return res.status(400).json({ error: '–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Å—Ç–∞—Ç—É—Å' });
    }
    const updated = await prisma.order.update({
      where: { id: +req.params.id },
      data: { status, agentComment: comment }
    });
    return res.json(updated);
  } catch (err) {
    next(err);
  }
});

export default router;
