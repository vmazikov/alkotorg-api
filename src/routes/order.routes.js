// src/routes/order.routes.js
import { Router }         from 'express';
import prisma             from '../utils/prisma.js';
import { authMiddleware } from '../middlewares/auth.js';
import { notifyAgent }    from '../utils/teleg.js';

const router = Router();
router.use(authMiddleware);

/**
 * POST /orders
 * –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑:
 * ‚Äì —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Ü–µ–Ω—ã —Å promo –∏ priceModifier (–∫—Ä–æ–º–µ nonModify)
 * ‚Äì —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –µ–≥–æ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç
 * ‚Äì —É–≤–µ–¥–æ–º–ª—è–µ—Ç Telegram-–∞–≥–µ–Ω—Ç–∞ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è (–µ—Å–ª–∏ –æ–Ω –ø—Ä–∏–≤—è–∑–∞–Ω)
 */
router.post('/', async (req, res, next) => {
  try {
    const { storeId, items } = req.body;
    if (!storeId || !Array.isArray(items) || items.length === 0) {
      return res
        .status(400)
        .json({ error: 'storeId –∏ –Ω–µ–ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ items –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' });
    }

    // 1) –ü–æ–ª—É—á–∞–µ–º —É –ø–æ–∫—É–ø–∞—Ç–µ–ª—è priceModifier –∏ telegramId –µ–≥–æ –∞–≥–µ–Ω—Ç–∞
    const customer = await prisma.user.findUnique({
      where: { id: req.user.id },
      select: {
        priceModifier: true,
        agent: {
          select: { telegramId: true }
        }
      }
    });
    if (!customer) {
      return res.status(404).json({ error: '–ü–æ–∫—É–ø–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }
    const factor = 1 + (customer.priceModifier / 100);

    // 2) –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –Ω—É–∂–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã
    const productIds = items.map(i => i.productId);
    const products = await prisma.product.findMany({
      where: { id: { in: productIds } },
      select: {
        id: true,
        basePrice: true,
        nonModify: true,
        promos: {
          where: { expiresAt: { gt: new Date() } },
          orderBy: { expiresAt: 'desc' },
          take: 1
        }
      }
    });

    // 3) –°—á–∏—Ç–∞–µ–º –∏—Ç–æ–≥ –∏ —Ñ–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –≤–ª–æ–∂–µ–Ω–Ω–æ–≥–æ create
    let total = 0;
    const createItems = items.map(({ productId, qty }) => {
      const p = products.find(x => x.id === productId);
      if (!p) throw new Error(`Product ${productId} not found`);

      const raw = p.promos.length ? p.promos[0].promoPrice : p.basePrice;
      const price = p.nonModify ? raw : +((raw * factor).toFixed(2));
      total += price * qty;
      return { productId, quantity: qty, price };
    });
    total = +total.toFixed(2);

    // 4) –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑ –≤–º–µ—Å—Ç–µ —Å –ø–æ–∑–∏—Ü–∏—è–º–∏, –≤–∫–ª—é—á–∞—è –≤–ª–æ–∂–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    const order = await prisma.order.create({
      data: {
        storeId: +storeId,
        userId:  req.user.id,
        total,
        items: { create: createItems }
      },
      include: {
        user: { select: { login: true, fullName: true } },
        store: {
          select: {
            title: true,
            user: {
              select: {
                agent: {
                  select: { login: true, fullName: true, telegramId: true }
                },
                fullName: true
              }
            }
          }
        },
        items: {
          include: {
            product: { select: { name: true, volume: true } }
          }
        }
      }
    });

    console.log('üÜï New order created:', order);

    // 5) –£–≤–µ–¥–æ–º–ª—è–µ–º Telegram-–∞–≥–µ–Ω—Ç–∞ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è
    const tg = order.store.user.agent?.telegramId;
    if (tg) {
      const link = `https://your-frontend.com/orders/${order.id}`;
      const text =
        `üÜï –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ #${order.id}\n` +
        `–ü–æ–∫—É–ø–∞—Ç–µ–ª—å: ${order.user.fullName}\n` +
        `–ú–∞–≥–∞–∑–∏–Ω: ${order.store.title}\n` +
        `–°—É–º–º–∞: ${order.total.toFixed(2)} ‚ÇΩ\n\n` +
        `–ü–µ—Ä–µ–π—Ç–∏ –∫ –∑–∞–∫–∞–∑—É: ${link}`;
      await notifyAgent(tg, text);
    }

    return res.status(201).json(order);
  } catch (err) {
    next(err);
  }
});

/**
 * GET /orders?status=[NEW|DONE]
 * –°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤ —Å —É—á—ë—Ç–æ–º —Ä–æ–ª–∏:
 * ‚Äì AGENT   ‚Üí –∑–∞–∫–∞–∑—ã –∫–ª–∏–µ–Ω—Ç–æ–≤ (user.agentId === agent.id)
 * ‚Äì USER    ‚Üí —Å–≤–æ–∏ –∑–∞–∫–∞–∑—ã (order.userId)
 * ‚Äì MANAGER ‚Üí –∑–∞–∫–∞–∑—ã –≤ –µ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞—Ö (store.managerId)
 * ‚Äì ADMIN   ‚Üí –≤—Å–µ
 * –ú–æ–∂–Ω–æ –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –ø–æ —Å—Ç–∞—Ç—É—Å—É.
 */
router.get('/', async (req, res, next) => {
  try {
    const { status } = req.query;
    const { role, id: userId } = req.user;

    const where = {};
    if (role === 'AGENT') {
      where.user = { agentId: userId };
    } else if (role === 'USER') {
      where.userId = userId;
    } else if (role === 'MANAGER') {
      where.store = { managerId: userId };
    }
    if (status && ['NEW','DONE'].includes(status)) {
      where.status = status;
    }

    const orders = await prisma.order.findMany({
      where,
      include: {
        user:  { select: { login: true, fullName: true } },
        store: {
          select: {
            title: true,
            user: {
              select: {
                agent: {
                  select: { login: true, fullName: true }
                }
              }
            }
          }
        },
        items: {
          include: {
            product: {
              select: { name: true, volume: true }
            }
          }
        }
      },
      orderBy: { createdAt: 'desc' }
    });

    res.json(orders);
  } catch (err) {
    next(err);
  }
});

/**
 * GET /orders/:id
 * –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –æ–¥–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞
 */
router.get('/:id', async (req, res, next) => {
  try {
    const order = await prisma.order.findUnique({
      where: { id: +req.params.id },
      include: {
        user:  { select: { login: true, fullName: true } },
        store: {
          select: {
            title: true,
            user: {
              select: {
                agent: { select: { login: true, fullName: true } }
              }
            }
          }
        },
        items: {
          include: {
            product: { select: { name: true, volume: true } }
          }
        }
      }
    });
    if (!order) {
      return res.status(404).json({ error: 'Not found' });
    }
    res.json(order);
  } catch (err) {
    next(err);
  }
});

/**
 * PUT /orders/:id/status
 * –°–º–µ–Ω–∞ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞ –∏ –∑–∞–ø–∏—Å—å agentComment (AGENT –∏ ADMIN)
 */
router.put('/:id/status', async (req, res, next) => {
  try {
    const { status, comment = '' } = req.body;
    if (!['NEW','DONE'].includes(status)) {
      return res.status(400).json({ error: '–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Å—Ç–∞—Ç—É—Å' });
    }
    const updated = await prisma.order.update({
      where: { id: +req.params.id },
      data: { status, agentComment: comment }
    });
    res.json(updated);
  } catch (err) {
    next(err);
  }
});

export default router;
