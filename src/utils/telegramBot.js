// src/utils/telegramBot.js
import TelegramBot from 'node-telegram-bot-api';
import prisma      from './prisma.js';
import bcrypt      from 'bcrypt';

// –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤ .env –µ—Å—Ç—å TELEGRAM_BOT_TOKEN –≤–∏–¥–∞ 123456:ABC-DEF...
if (!process.env.TELEGRAM_BOT_TOKEN) {
  throw new Error('TELEGRAM_BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω –≤ env');
}

const bot = new TelegramBot(process.env.TELEGRAM_BOT_TOKEN, { polling: true });

// –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å inline-–∫–Ω–æ–ø–∫–∞–º–∏
const mainMenu = {
  reply_markup: {
    inline_keyboard: [
      [
        { text: 'üîó –ü—Ä–∏–≤—è–∑–∞—Ç—å—Å—è', callback_data: 'BIND' },
        { text: '‚ùå –û—Ç–≤—è–∑–∞—Ç—å—Å—è',   callback_data: 'UNBIND' }
      ],
      [
        { text: '‚ÑπÔ∏è –ü–æ–º–æ—â—å', callback_data: 'HELP' }
      ]
    ]
  }
};

// /start ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é
bot.onText(/\/start/, msg => {
  bot.sendMessage(
    msg.chat.id,
    `–ü—Ä–∏–≤–µ—Ç, ${msg.from.first_name}!\n–Ø ‚Äî –±–æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –∑–∞–∫–∞–∑–∞—Ö.\n\n` +
    `–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø—Ä–∏–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç –∏–ª–∏ –ø–æ–ª—É—á–∏—Ç—å –ø–æ–º–æ—â—å.`,
    mainMenu
  );
});

// /help ‚Äî —Å–ø—Ä–∞–≤–∫–∞
bot.onText(/\/help/, msg => {
  bot.sendMessage(
    msg.chat.id,
    `–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:\n` +
    `/start ‚Äî –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n` +
    `/help  ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n\n` +
    `–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏:\n` +
    `üîó –ü—Ä–∏–≤—è–∑–∞—Ç—å—Å—è ‚Äî –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–≥–µ–Ω—Ç–∞\n` +
    `‚ùå –û—Ç–≤—è–∑–∞—Ç—å—Å—è  ‚Äî –æ—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è`,
    { reply_markup: { remove_keyboard: true } }
  );
});

// Inline-–∫–Ω–æ–ø–∫–∏
bot.on('callback_query', async query => {
  const chatId = query.message.chat.id;
  const data   = query.data;

  if (data === 'HELP') {
    // –ö–∞–∫ /help, –Ω–æ –≤ HTML
    return bot.sendMessage(
      chatId,
      `–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:\n` +
      `/start ‚Äî –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n` +
      `/help  ‚Äî —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n\n` +
      `–ß—Ç–æ–±—ã –ø—Ä–∏–≤—è–∑–∞—Ç—å—Å—è, –Ω–∞–∂–º–∏—Ç–µ üîó ¬´–ü—Ä–∏–≤—è–∑–∞—Ç—å—Å—è¬ª –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ:\n` +
      `<code>login:–ø–∞—Ä–æ–ª—å</code>\n\n` +
      `–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /bind login –ø–∞—Ä–æ–ª—å`,
      { parse_mode: 'HTML', reply_markup: mainMenu }
    );
  }

  if (data === 'UNBIND') {
    // –û—Ç–≤—è–∑–∫–∞
    try {
      const user = await prisma.user.findUnique({
        where: { telegramId: String(chatId) }
      });
      if (!user) {
        return bot.sendMessage(
          chatId,
          '‚ÑπÔ∏è –í—ã –µ—â—ë –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω—ã.',
          mainMenu
        );
      }
      await prisma.user.update({
        where: { id: user.id },
        data:  { telegramId: null }
      });
      return bot.sendMessage(
        chatId,
        '‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–≤—è–∑–∞–Ω–æ, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—ã–∫–ª—é—á–µ–Ω—ã.',
        mainMenu
      );
    } catch (e) {
      console.error('Error unbinding:', e);
      return bot.sendMessage(
        chatId,
        '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–≤—è–∑–∞—Ç—å—Å—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
        mainMenu
      );
    }
  }

  if (data === 'BIND') {
    // –ü—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ login:–ø–∞—Ä–æ–ª—å
    return bot.sendMessage(
      chatId,
      '–î–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤ —á–∞—Ç –≤–∞—à –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n' +
      `<code>login:–ø–∞—Ä–æ–ª—å</code>`,
      { parse_mode: 'HTML', reply_markup: mainMenu }
    );
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π ‚Äî –ø—Ä–æ–±—É–µ–º —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å login:–ø–∞—Ä–æ–ª—å
bot.on('message', async msg => {
  const chatId = msg.chat.id;
  const text   = msg.text?.trim();

  // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã –∏ –ø—É—Å—Ç—ã–µ
  if (!text || text.startsWith('/')) return;

  // –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞–∑–¥–µ–ª–∏—Ç—å –ø–æ –¥–≤–æ–µ—Ç–æ—á–∏—é
  const [login, pass] = text.split(':', 2);
  if (!login || !pass) {
    return bot.sendMessage(
      chatId,
      '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:<code>login:–ø–∞—Ä–æ–ª—å</code>',
      { parse_mode: 'HTML', reply_markup: mainMenu }
    );
  }

  try {
    const user = await prisma.user.findUnique({
      where: { login }
    });
    if (!user || user.role !== 'AGENT') {
      return bot.sendMessage(
        chatId,
        '‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–≥–µ–Ω—Ç–æ–º.',
        mainMenu
      );
    }
    const ok = await bcrypt.compare(pass, user.passwordHash);
    if (!ok) {
      return bot.sendMessage(
        chatId,
        '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å.',
        mainMenu
      );
    }
    await prisma.user.update({
      where: { id: user.id },
      data:  { telegramId: String(chatId) }
    });
    return bot.sendMessage(
      chatId,
      '‚úÖ –£—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω–æ! –¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.',
      mainMenu
    );
  } catch (e) {
    console.error('Error binding:', e);
    return bot.sendMessage(
      chatId,
      '‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
      mainMenu
    );
  }
});

export default bot;
