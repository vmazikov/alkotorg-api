datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            Int    @id @default(autoincrement())
  login         String @unique
  phone         String @unique
  fullName      String?
  passwordHash  String
  role          Role   @default(USER)
  priceModifier Float  @default(0)

  agent   User?  @relation("AgentClients", fields: [agentId], references: [id])
  clients User[] @relation("AgentClients")
  agentId Int?

  stores       Store[]
  storeManaged Store?  @relation("StoreManager")

  orders    Order[]
  createdAt DateTime @default(now())
}

model Store {
  id      Int    @id @default(autoincrement())
  title   String
  address String
  userId  Int
  user    User   @relation(fields: [userId], references: [id])

  managerId Int?  @unique
  manager   User? @relation("StoreManager", fields: [managerId], references: [id])

  orders Order[]
}

model Product {
  id            Int     @id @default(autoincrement())
  productId     String  @unique
  article       String? @unique
  name          String
  brand         String?
  type          String?
  volume        Float? // ← было String?
  degree        Float? // оставляем числом
  quantityInBox Int?
  basePrice     Float
  img           String?
  stock         Int     @default(0)
  nonModify    Boolean @default(false)
  isArchived    Boolean @default(false)

  wineColor      String?
  sweetnessLevel String?
  wineType       String?
  giftPackaging  String?
  manufacturer   String?
  excerpt        String?
  rawMaterials   String?
  taste          String?

  promos     Promo[]
  orderItems OrderItem[]
  createdAt  DateTime    @default(now())
  cartItems  CartItem[]
}

model Promo {
  id         Int      @id @default(autoincrement())
  product    Product  @relation(fields: [productId], references: [id])
  productId  Int
  promoPrice Float
  comment    String?
  expiresAt  DateTime
}

model Order {
  id      Int   @id @default(autoincrement())
  storeId Int
  store   Store @relation(fields: [storeId], references: [id])
  userId  Int // кто оформил (USER либо MANAGER)
  user    User  @relation(fields: [userId], references: [id])

  total        Float
  status       OrderStatus @default(NEW)
  agentComment String?

  items     OrderItem[]
  createdAt DateTime    @default(now())
}

model OrderItem {
  id        Int     @id @default(autoincrement())
  order     Order   @relation(fields: [orderId], references: [id])
  orderId   Int
  product   Product @relation(fields: [productId], references: [id])
  productId Int
  price     Float
  quantity  Int
}

enum OrderStatus {
  NEW
  DONE
}

model Cart {
  id        Int        @id @default(autoincrement())
  userId    Int
  storeId   Int
  items     CartItem[]
  updatedAt DateTime   @updatedAt

  @@unique([userId, storeId])
}

model CartItem {
  id        Int @id @default(autoincrement())
  cartId    Int
  productId Int
  qty       Int

  product Product @relation(fields: [productId], references: [id])
  cart    Cart    @relation(fields: [cartId], references: [id])
  @@unique([cartId, productId])
}

enum Role {
  ADMIN
  AGENT
  USER
  MANAGER
}
